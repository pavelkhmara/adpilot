generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Client {
  id          String       @id @default(cuid())
  key         String       @unique // acme, orbit, nova, zen
  name        String
  createdAt   DateTime     @default(now()) @db.Timestamptz
  campaigns   Campaign[]
  connections Connection[]
}

model Campaign {
  id         String        @id @default(cuid())
  externalId String? // optional id from Ads
  clientId   String
  client     Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  channel    String // "Google Ads" | "Meta Ads"
  name       String
  status     String // "Active" | "Learning" | "Paused"
  notes      String[] // text[]
  metrics    MetricDaily[]
  createdAt  DateTime      @default(now()) @db.Timestamptz
  updatedAt  DateTime      @default(now()) @updatedAt @db.Timestamptz
  recommendations Recommendation[]

  @@unique([clientId, name, channel], name: "clientId_name_channel")
  @@index([clientId, channel])
  @@index([name])
}

model MetricDaily {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  date DateTime @db.Date

  impressions Int
  clicks      Int
  spend       Decimal @db.Decimal(18, 2)
  conversions Int
  revenue     Decimal @db.Decimal(18, 2)
  frequency   Decimal @db.Decimal(6, 2)
  ctr         Decimal @db.Decimal(6, 4) // 0..1

  @@unique([campaignId, date], name: "campaignId_date")
  @@index([date])
}

enum Provider {
  GOOGLE_ADS
  META_ADS
  GA4
}

enum ConnectionMode {
  demo
  live
}

enum ConnectionStatus {
  disconnected
  connected
}

model Connection {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  provider Provider
  status   ConnectionStatus @default(disconnected)
  mode     ConnectionMode   @default(demo)

  externalAccountRef String?
  createdAt          DateTime @default(now()) @db.Timestamptz
  updatedAt          DateTime @updatedAt @db.Timestamptz

  @@index([clientId, provider])
  @@unique([clientId, provider], name: "client_provider_unique")
}

model Recommendation {
  id        String   @id @default(cuid())

  campaignId  String
  campaign    Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // простая схема без enum'ов, чтобы не упираться в рантайм
  entityType String            // 'account' | 'campaign' | 'adset' | 'creative'
  entityId   String?           // nullable для account-уровня
  actionType String            // 'DecreaseBudgetByPct' | 'PauseCreative' | ...
  payload    Json?             // параметры действия (например, { "pct": 10 })
  reason     Json?             // объяснения/флаги (массив строк или объект)
  priority   Int      @default(0)
  status     String   @default("proposed") // 'proposed' | 'applied' | 'rejected'

  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz

  @@index([campaignId])
  @@index([campaignId, status])
  @@index([campaignId, priority, createdAt])
}
